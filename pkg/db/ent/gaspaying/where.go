// Code generated by ent, DO NOT EDIT.

package gaspaying

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/cloud-hashing-order/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// OrderID applies equality check predicate on the "order_id" field. It's identical to OrderIDEQ.
func OrderID(v uuid.UUID) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderID), v))
	})
}

// FeeTypeID applies equality check predicate on the "fee_type_id" field. It's identical to FeeTypeIDEQ.
func FeeTypeID(v uuid.UUID) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeeTypeID), v))
	})
}

// PaymentID applies equality check predicate on the "payment_id" field. It's identical to PaymentIDEQ.
func PaymentID(v uuid.UUID) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentID), v))
	})
}

// DurationMinutes applies equality check predicate on the "duration_minutes" field. It's identical to DurationMinutesEQ.
func DurationMinutes(v uint32) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDurationMinutes), v))
	})
}

// CreateAt applies equality check predicate on the "create_at" field. It's identical to CreateAtEQ.
func CreateAt(v uint32) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateAt), v))
	})
}

// UpdateAt applies equality check predicate on the "update_at" field. It's identical to UpdateAtEQ.
func UpdateAt(v uint32) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateAt), v))
	})
}

// DeleteAt applies equality check predicate on the "delete_at" field. It's identical to DeleteAtEQ.
func DeleteAt(v uint32) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleteAt), v))
	})
}

// OrderIDEQ applies the EQ predicate on the "order_id" field.
func OrderIDEQ(v uuid.UUID) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderID), v))
	})
}

// OrderIDNEQ applies the NEQ predicate on the "order_id" field.
func OrderIDNEQ(v uuid.UUID) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderID), v))
	})
}

// OrderIDIn applies the In predicate on the "order_id" field.
func OrderIDIn(vs ...uuid.UUID) predicate.GasPaying {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GasPaying(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrderID), v...))
	})
}

// OrderIDNotIn applies the NotIn predicate on the "order_id" field.
func OrderIDNotIn(vs ...uuid.UUID) predicate.GasPaying {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GasPaying(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrderID), v...))
	})
}

// OrderIDGT applies the GT predicate on the "order_id" field.
func OrderIDGT(v uuid.UUID) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderID), v))
	})
}

// OrderIDGTE applies the GTE predicate on the "order_id" field.
func OrderIDGTE(v uuid.UUID) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderID), v))
	})
}

// OrderIDLT applies the LT predicate on the "order_id" field.
func OrderIDLT(v uuid.UUID) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderID), v))
	})
}

// OrderIDLTE applies the LTE predicate on the "order_id" field.
func OrderIDLTE(v uuid.UUID) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderID), v))
	})
}

// FeeTypeIDEQ applies the EQ predicate on the "fee_type_id" field.
func FeeTypeIDEQ(v uuid.UUID) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeeTypeID), v))
	})
}

// FeeTypeIDNEQ applies the NEQ predicate on the "fee_type_id" field.
func FeeTypeIDNEQ(v uuid.UUID) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFeeTypeID), v))
	})
}

// FeeTypeIDIn applies the In predicate on the "fee_type_id" field.
func FeeTypeIDIn(vs ...uuid.UUID) predicate.GasPaying {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GasPaying(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFeeTypeID), v...))
	})
}

// FeeTypeIDNotIn applies the NotIn predicate on the "fee_type_id" field.
func FeeTypeIDNotIn(vs ...uuid.UUID) predicate.GasPaying {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GasPaying(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFeeTypeID), v...))
	})
}

// FeeTypeIDGT applies the GT predicate on the "fee_type_id" field.
func FeeTypeIDGT(v uuid.UUID) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFeeTypeID), v))
	})
}

// FeeTypeIDGTE applies the GTE predicate on the "fee_type_id" field.
func FeeTypeIDGTE(v uuid.UUID) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFeeTypeID), v))
	})
}

// FeeTypeIDLT applies the LT predicate on the "fee_type_id" field.
func FeeTypeIDLT(v uuid.UUID) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFeeTypeID), v))
	})
}

// FeeTypeIDLTE applies the LTE predicate on the "fee_type_id" field.
func FeeTypeIDLTE(v uuid.UUID) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFeeTypeID), v))
	})
}

// PaymentIDEQ applies the EQ predicate on the "payment_id" field.
func PaymentIDEQ(v uuid.UUID) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentID), v))
	})
}

// PaymentIDNEQ applies the NEQ predicate on the "payment_id" field.
func PaymentIDNEQ(v uuid.UUID) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPaymentID), v))
	})
}

// PaymentIDIn applies the In predicate on the "payment_id" field.
func PaymentIDIn(vs ...uuid.UUID) predicate.GasPaying {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GasPaying(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPaymentID), v...))
	})
}

// PaymentIDNotIn applies the NotIn predicate on the "payment_id" field.
func PaymentIDNotIn(vs ...uuid.UUID) predicate.GasPaying {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GasPaying(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPaymentID), v...))
	})
}

// PaymentIDGT applies the GT predicate on the "payment_id" field.
func PaymentIDGT(v uuid.UUID) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPaymentID), v))
	})
}

// PaymentIDGTE applies the GTE predicate on the "payment_id" field.
func PaymentIDGTE(v uuid.UUID) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPaymentID), v))
	})
}

// PaymentIDLT applies the LT predicate on the "payment_id" field.
func PaymentIDLT(v uuid.UUID) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPaymentID), v))
	})
}

// PaymentIDLTE applies the LTE predicate on the "payment_id" field.
func PaymentIDLTE(v uuid.UUID) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPaymentID), v))
	})
}

// DurationMinutesEQ applies the EQ predicate on the "duration_minutes" field.
func DurationMinutesEQ(v uint32) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDurationMinutes), v))
	})
}

// DurationMinutesNEQ applies the NEQ predicate on the "duration_minutes" field.
func DurationMinutesNEQ(v uint32) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDurationMinutes), v))
	})
}

// DurationMinutesIn applies the In predicate on the "duration_minutes" field.
func DurationMinutesIn(vs ...uint32) predicate.GasPaying {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GasPaying(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDurationMinutes), v...))
	})
}

// DurationMinutesNotIn applies the NotIn predicate on the "duration_minutes" field.
func DurationMinutesNotIn(vs ...uint32) predicate.GasPaying {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GasPaying(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDurationMinutes), v...))
	})
}

// DurationMinutesGT applies the GT predicate on the "duration_minutes" field.
func DurationMinutesGT(v uint32) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDurationMinutes), v))
	})
}

// DurationMinutesGTE applies the GTE predicate on the "duration_minutes" field.
func DurationMinutesGTE(v uint32) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDurationMinutes), v))
	})
}

// DurationMinutesLT applies the LT predicate on the "duration_minutes" field.
func DurationMinutesLT(v uint32) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDurationMinutes), v))
	})
}

// DurationMinutesLTE applies the LTE predicate on the "duration_minutes" field.
func DurationMinutesLTE(v uint32) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDurationMinutes), v))
	})
}

// CreateAtEQ applies the EQ predicate on the "create_at" field.
func CreateAtEQ(v uint32) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateAt), v))
	})
}

// CreateAtNEQ applies the NEQ predicate on the "create_at" field.
func CreateAtNEQ(v uint32) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateAt), v))
	})
}

// CreateAtIn applies the In predicate on the "create_at" field.
func CreateAtIn(vs ...uint32) predicate.GasPaying {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GasPaying(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateAt), v...))
	})
}

// CreateAtNotIn applies the NotIn predicate on the "create_at" field.
func CreateAtNotIn(vs ...uint32) predicate.GasPaying {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GasPaying(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateAt), v...))
	})
}

// CreateAtGT applies the GT predicate on the "create_at" field.
func CreateAtGT(v uint32) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateAt), v))
	})
}

// CreateAtGTE applies the GTE predicate on the "create_at" field.
func CreateAtGTE(v uint32) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateAt), v))
	})
}

// CreateAtLT applies the LT predicate on the "create_at" field.
func CreateAtLT(v uint32) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateAt), v))
	})
}

// CreateAtLTE applies the LTE predicate on the "create_at" field.
func CreateAtLTE(v uint32) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateAt), v))
	})
}

// UpdateAtEQ applies the EQ predicate on the "update_at" field.
func UpdateAtEQ(v uint32) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtNEQ applies the NEQ predicate on the "update_at" field.
func UpdateAtNEQ(v uint32) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtIn applies the In predicate on the "update_at" field.
func UpdateAtIn(vs ...uint32) predicate.GasPaying {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GasPaying(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateAt), v...))
	})
}

// UpdateAtNotIn applies the NotIn predicate on the "update_at" field.
func UpdateAtNotIn(vs ...uint32) predicate.GasPaying {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GasPaying(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateAt), v...))
	})
}

// UpdateAtGT applies the GT predicate on the "update_at" field.
func UpdateAtGT(v uint32) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtGTE applies the GTE predicate on the "update_at" field.
func UpdateAtGTE(v uint32) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtLT applies the LT predicate on the "update_at" field.
func UpdateAtLT(v uint32) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtLTE applies the LTE predicate on the "update_at" field.
func UpdateAtLTE(v uint32) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateAt), v))
	})
}

// DeleteAtEQ applies the EQ predicate on the "delete_at" field.
func DeleteAtEQ(v uint32) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtNEQ applies the NEQ predicate on the "delete_at" field.
func DeleteAtNEQ(v uint32) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtIn applies the In predicate on the "delete_at" field.
func DeleteAtIn(vs ...uint32) predicate.GasPaying {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GasPaying(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeleteAt), v...))
	})
}

// DeleteAtNotIn applies the NotIn predicate on the "delete_at" field.
func DeleteAtNotIn(vs ...uint32) predicate.GasPaying {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GasPaying(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeleteAt), v...))
	})
}

// DeleteAtGT applies the GT predicate on the "delete_at" field.
func DeleteAtGT(v uint32) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtGTE applies the GTE predicate on the "delete_at" field.
func DeleteAtGTE(v uint32) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtLT applies the LT predicate on the "delete_at" field.
func DeleteAtLT(v uint32) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtLTE applies the LTE predicate on the "delete_at" field.
func DeleteAtLTE(v uint32) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeleteAt), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GasPaying) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GasPaying) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GasPaying) predicate.GasPaying {
	return predicate.GasPaying(func(s *sql.Selector) {
		p(s.Not())
	})
}
