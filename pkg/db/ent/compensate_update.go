// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-order/pkg/db/ent/compensate"
	"github.com/NpoolPlatform/cloud-hashing-order/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// CompensateUpdate is the builder for updating Compensate entities.
type CompensateUpdate struct {
	config
	hooks    []Hook
	mutation *CompensateMutation
}

// Where appends a list predicates to the CompensateUpdate builder.
func (cu *CompensateUpdate) Where(ps ...predicate.Compensate) *CompensateUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetOrderID sets the "order_id" field.
func (cu *CompensateUpdate) SetOrderID(u uuid.UUID) *CompensateUpdate {
	cu.mutation.SetOrderID(u)
	return cu
}

// SetStart sets the "start" field.
func (cu *CompensateUpdate) SetStart(u uint32) *CompensateUpdate {
	cu.mutation.ResetStart()
	cu.mutation.SetStart(u)
	return cu
}

// AddStart adds u to the "start" field.
func (cu *CompensateUpdate) AddStart(u int32) *CompensateUpdate {
	cu.mutation.AddStart(u)
	return cu
}

// SetEnd sets the "end" field.
func (cu *CompensateUpdate) SetEnd(u uint32) *CompensateUpdate {
	cu.mutation.ResetEnd()
	cu.mutation.SetEnd(u)
	return cu
}

// AddEnd adds u to the "end" field.
func (cu *CompensateUpdate) AddEnd(u int32) *CompensateUpdate {
	cu.mutation.AddEnd(u)
	return cu
}

// SetMessage sets the "message" field.
func (cu *CompensateUpdate) SetMessage(s string) *CompensateUpdate {
	cu.mutation.SetMessage(s)
	return cu
}

// SetCreateAt sets the "create_at" field.
func (cu *CompensateUpdate) SetCreateAt(u uint32) *CompensateUpdate {
	cu.mutation.ResetCreateAt()
	cu.mutation.SetCreateAt(u)
	return cu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (cu *CompensateUpdate) SetNillableCreateAt(u *uint32) *CompensateUpdate {
	if u != nil {
		cu.SetCreateAt(*u)
	}
	return cu
}

// AddCreateAt adds u to the "create_at" field.
func (cu *CompensateUpdate) AddCreateAt(u int32) *CompensateUpdate {
	cu.mutation.AddCreateAt(u)
	return cu
}

// SetUpdateAt sets the "update_at" field.
func (cu *CompensateUpdate) SetUpdateAt(u uint32) *CompensateUpdate {
	cu.mutation.ResetUpdateAt()
	cu.mutation.SetUpdateAt(u)
	return cu
}

// AddUpdateAt adds u to the "update_at" field.
func (cu *CompensateUpdate) AddUpdateAt(u int32) *CompensateUpdate {
	cu.mutation.AddUpdateAt(u)
	return cu
}

// SetDeleteAt sets the "delete_at" field.
func (cu *CompensateUpdate) SetDeleteAt(u uint32) *CompensateUpdate {
	cu.mutation.ResetDeleteAt()
	cu.mutation.SetDeleteAt(u)
	return cu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (cu *CompensateUpdate) SetNillableDeleteAt(u *uint32) *CompensateUpdate {
	if u != nil {
		cu.SetDeleteAt(*u)
	}
	return cu
}

// AddDeleteAt adds u to the "delete_at" field.
func (cu *CompensateUpdate) AddDeleteAt(u int32) *CompensateUpdate {
	cu.mutation.AddDeleteAt(u)
	return cu
}

// Mutation returns the CompensateMutation object of the builder.
func (cu *CompensateUpdate) Mutation() *CompensateMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CompensateUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cu.defaults()
	if len(cu.hooks) == 0 {
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CompensateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CompensateUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CompensateUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CompensateUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CompensateUpdate) defaults() {
	if _, ok := cu.mutation.UpdateAt(); !ok {
		v := compensate.UpdateDefaultUpdateAt()
		cu.mutation.SetUpdateAt(v)
	}
}

func (cu *CompensateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   compensate.Table,
			Columns: compensate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: compensate.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.OrderID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: compensate.FieldOrderID,
		})
	}
	if value, ok := cu.mutation.Start(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: compensate.FieldStart,
		})
	}
	if value, ok := cu.mutation.AddedStart(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: compensate.FieldStart,
		})
	}
	if value, ok := cu.mutation.End(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: compensate.FieldEnd,
		})
	}
	if value, ok := cu.mutation.AddedEnd(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: compensate.FieldEnd,
		})
	}
	if value, ok := cu.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: compensate.FieldMessage,
		})
	}
	if value, ok := cu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: compensate.FieldCreateAt,
		})
	}
	if value, ok := cu.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: compensate.FieldCreateAt,
		})
	}
	if value, ok := cu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: compensate.FieldUpdateAt,
		})
	}
	if value, ok := cu.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: compensate.FieldUpdateAt,
		})
	}
	if value, ok := cu.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: compensate.FieldDeleteAt,
		})
	}
	if value, ok := cu.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: compensate.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{compensate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CompensateUpdateOne is the builder for updating a single Compensate entity.
type CompensateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CompensateMutation
}

// SetOrderID sets the "order_id" field.
func (cuo *CompensateUpdateOne) SetOrderID(u uuid.UUID) *CompensateUpdateOne {
	cuo.mutation.SetOrderID(u)
	return cuo
}

// SetStart sets the "start" field.
func (cuo *CompensateUpdateOne) SetStart(u uint32) *CompensateUpdateOne {
	cuo.mutation.ResetStart()
	cuo.mutation.SetStart(u)
	return cuo
}

// AddStart adds u to the "start" field.
func (cuo *CompensateUpdateOne) AddStart(u int32) *CompensateUpdateOne {
	cuo.mutation.AddStart(u)
	return cuo
}

// SetEnd sets the "end" field.
func (cuo *CompensateUpdateOne) SetEnd(u uint32) *CompensateUpdateOne {
	cuo.mutation.ResetEnd()
	cuo.mutation.SetEnd(u)
	return cuo
}

// AddEnd adds u to the "end" field.
func (cuo *CompensateUpdateOne) AddEnd(u int32) *CompensateUpdateOne {
	cuo.mutation.AddEnd(u)
	return cuo
}

// SetMessage sets the "message" field.
func (cuo *CompensateUpdateOne) SetMessage(s string) *CompensateUpdateOne {
	cuo.mutation.SetMessage(s)
	return cuo
}

// SetCreateAt sets the "create_at" field.
func (cuo *CompensateUpdateOne) SetCreateAt(u uint32) *CompensateUpdateOne {
	cuo.mutation.ResetCreateAt()
	cuo.mutation.SetCreateAt(u)
	return cuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (cuo *CompensateUpdateOne) SetNillableCreateAt(u *uint32) *CompensateUpdateOne {
	if u != nil {
		cuo.SetCreateAt(*u)
	}
	return cuo
}

// AddCreateAt adds u to the "create_at" field.
func (cuo *CompensateUpdateOne) AddCreateAt(u int32) *CompensateUpdateOne {
	cuo.mutation.AddCreateAt(u)
	return cuo
}

// SetUpdateAt sets the "update_at" field.
func (cuo *CompensateUpdateOne) SetUpdateAt(u uint32) *CompensateUpdateOne {
	cuo.mutation.ResetUpdateAt()
	cuo.mutation.SetUpdateAt(u)
	return cuo
}

// AddUpdateAt adds u to the "update_at" field.
func (cuo *CompensateUpdateOne) AddUpdateAt(u int32) *CompensateUpdateOne {
	cuo.mutation.AddUpdateAt(u)
	return cuo
}

// SetDeleteAt sets the "delete_at" field.
func (cuo *CompensateUpdateOne) SetDeleteAt(u uint32) *CompensateUpdateOne {
	cuo.mutation.ResetDeleteAt()
	cuo.mutation.SetDeleteAt(u)
	return cuo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (cuo *CompensateUpdateOne) SetNillableDeleteAt(u *uint32) *CompensateUpdateOne {
	if u != nil {
		cuo.SetDeleteAt(*u)
	}
	return cuo
}

// AddDeleteAt adds u to the "delete_at" field.
func (cuo *CompensateUpdateOne) AddDeleteAt(u int32) *CompensateUpdateOne {
	cuo.mutation.AddDeleteAt(u)
	return cuo
}

// Mutation returns the CompensateMutation object of the builder.
func (cuo *CompensateUpdateOne) Mutation() *CompensateMutation {
	return cuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CompensateUpdateOne) Select(field string, fields ...string) *CompensateUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Compensate entity.
func (cuo *CompensateUpdateOne) Save(ctx context.Context) (*Compensate, error) {
	var (
		err  error
		node *Compensate
	)
	cuo.defaults()
	if len(cuo.hooks) == 0 {
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CompensateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Compensate)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CompensateMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CompensateUpdateOne) SaveX(ctx context.Context) *Compensate {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CompensateUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CompensateUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CompensateUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdateAt(); !ok {
		v := compensate.UpdateDefaultUpdateAt()
		cuo.mutation.SetUpdateAt(v)
	}
}

func (cuo *CompensateUpdateOne) sqlSave(ctx context.Context) (_node *Compensate, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   compensate.Table,
			Columns: compensate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: compensate.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Compensate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, compensate.FieldID)
		for _, f := range fields {
			if !compensate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != compensate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.OrderID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: compensate.FieldOrderID,
		})
	}
	if value, ok := cuo.mutation.Start(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: compensate.FieldStart,
		})
	}
	if value, ok := cuo.mutation.AddedStart(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: compensate.FieldStart,
		})
	}
	if value, ok := cuo.mutation.End(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: compensate.FieldEnd,
		})
	}
	if value, ok := cuo.mutation.AddedEnd(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: compensate.FieldEnd,
		})
	}
	if value, ok := cuo.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: compensate.FieldMessage,
		})
	}
	if value, ok := cuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: compensate.FieldCreateAt,
		})
	}
	if value, ok := cuo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: compensate.FieldCreateAt,
		})
	}
	if value, ok := cuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: compensate.FieldUpdateAt,
		})
	}
	if value, ok := cuo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: compensate.FieldUpdateAt,
		})
	}
	if value, ok := cuo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: compensate.FieldDeleteAt,
		})
	}
	if value, ok := cuo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: compensate.FieldDeleteAt,
		})
	}
	_node = &Compensate{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{compensate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
